set encoding=utf-8
scriptencoding utf-8

if v:version < '800'
  runtime bundle/vim-pathogen/autoload/pathogen.vim
  let g:pathogen_disabled = []
  call add(g:pathogen_disabled, 'ale')
  execute pathogen#infect()
endif

if has('nvim')
  packadd firenvim

  if has('python3')
    packadd semshi
  end
end

if !has('nvim')
  packadd vim-highlightedyank

  let g:highlightedyank_highlight_duration = 500
end

if has("unix")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set rtp+=/opt/homebrew/opt/fzf
  endif
endif

if !has('gui') && has('termguicolors')
  let &t_8f = "[38;2;%lu;%lu;%lum"
  let &t_8b = "[48;2;%lu;%lu;%lum"
  set termguicolors
endif

syntax on
filetype plugin indent on

set number " display line numbers
set modelines=0

set path+=**

set background=dark

let g:vim_monokai_tasty_italic = 1
colorscheme vim-monokai-tasty

let g:airline_theme='monokai_tasty'

set ignorecase smartcase

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

set showcmd ruler laststatus=2

set splitright

set history=500
set hidden
set nobackup
set noundofile
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

set listchars=trail:.,tab:>-,extends:>,precedes:<,nbsp:Â¬
set list

set backspace=indent,eol,start
set showmatch
set wildmode=full
set wildmenu
set complete-=i

if v:version >= '900'
  set wildoptions=pum
endif

set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set foldlevelstart=2

set iskeyword+=-

inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

set scrolloff=999
set sidescrolloff=0

set sidescroll=1

let g:ruby_heredoc_syntax_filetypes = {
  \ "sql" : {
  \   "start" : "SQL",
  \},
  \ "xml" : {
  \   "start" : "XML",
  \},
\}

" Yes, test for > 1, not > 0. There's no use in jumping to line 1,
" if Vim would start at line 1 anyway.
if has('nvim')
  autocmd BufReadPost *
    \  if line("'\"") > 1 && line("'\"") <= line("$")
    \|   exe 'normal! g`"zvzz'
    \| endif
endif

if v:version < '800'
  let g:syntastic_ruby_checkers = ['rubocop']
  let g:syntastic_eruby_checkers = ['ruumba']
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
else
  let g:airline#extensions#ale#enabled = 1
endif

let g:localvimrc_persistent = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

set spelllang=en_gb,de
autocmd FileType mail set spell
autocmd FileType gitcommit set spell
autocmd FileType markdown set spell

autocmd BufEnter,BufNew *.info call CheckSlackBuildInfo()
function CheckSlackBuildInfo()
  if filereadable(expand('%:p:r'). '.SlackBuild')
    setlocal filetype=sh
  endif
endfunction

" Hide statusline of terminal buffer
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:fzf_history_dir = '~/.local/share/fzf/history'

command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = "rg -M120 --hidden -g'!.git' --column --line-number --no-heading --color=always --smart-case -- %s || true"
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

" some mappings for fzf commands
nnoremap <Space>pf :Files<ENTER>
nnoremap <Space>srp :Rg<ENTER>
nnoremap <Space>sap :Ag<ENTER>
nnoremap <Space>bb :Buffers<ENTER>
nnoremap <Space>* :Rg <C-R><C-W><ENTER>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

augroup vimrc
  au BufNewFile,BufRead Jenkinsfile*         set filetype=groovy
  au BufNewFile,BufRead jenkinsfile*         set filetype=groovy
augroup END

" some more mappings
nnoremap <Space>bd :bd<ENTER>
nnoremap <Space>bn :bn<ENTER>
nnoremap <Space>bp :bp<ENTER>
nnoremap <Space>gb :Git blame<ENTER>
nnoremap <Space>gS :Git add<ENTER>

nnoremap <Space>el :lopen<ENTER>
nnoremap <Space>eL :lclose<ENTER>

nnoremap <Space>wl <C-W>l
nnoremap <Space>wh <C-W>h
nnoremap <Space>wj <C-W>j
nnoremap <Space>wk <C-W>k

nnoremap ,gg :ALEGoToDefinition<ENTER>
nnoremap ,gG :vs<ENTER>:ALEGoToDefinition<ENTER>

nnoremap ,tb :Dispatch<ENTER>

autocmd QuickFixCmdPost *grep* cwindow
